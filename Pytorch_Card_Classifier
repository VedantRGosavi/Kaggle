{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3b106a78",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-26T13:13:49.970059Z",
     "iopub.status.busy": "2024-04-26T13:13:49.969649Z",
     "iopub.status.idle": "2024-04-26T13:13:58.154501Z",
     "shell.execute_reply": "2024-04-26T13:13:58.153684Z"
    },
    "papermill": {
     "duration": 8.196223,
     "end_time": "2024-04-26T13:13:58.156809",
     "exception": false,
     "start_time": "2024-04-26T13:13:49.960586",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch \n",
    "import torch.nn as nn     \n",
    "import torch.optim as optim   #optimizer\n",
    "\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import torchvision\n",
    "import torchvision.transforms as transforms    #Image files necessary \n",
    "from torchvision.datasets import ImageFolder\n",
    "import timm   #for Image Classification \n",
    "\n",
    "import matplotlib.pyplot as plt # For Data Viz \n",
    "import pandas as pd \n",
    "import numpy as np \n",
    "import sys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "46280d3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:13:58.172719Z",
     "iopub.status.busy": "2024-04-26T13:13:58.172277Z",
     "iopub.status.idle": "2024-04-26T13:13:58.177754Z",
     "shell.execute_reply": "2024-04-26T13:13:58.176911Z"
    },
    "papermill": {
     "duration": 0.01576,
     "end_time": "2024-04-26T13:13:58.179883",
     "exception": false,
     "start_time": "2024-04-26T13:13:58.164123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "System Version:  3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]\n",
      "PyTorch Version:  2.1.2\n",
      "Torchvision Version:  0.16.2\n",
      "Numpy Version:  1.26.4\n",
      "Pandas Version:  2.2.2\n"
     ]
    }
   ],
   "source": [
    "print('System Version: ', sys.version)\n",
    "print('PyTorch Version: ', torch.__version__)\n",
    "print('Torchvision Version: ', torchvision.__version__)\n",
    "print('Numpy Version: ', np.__version__)\n",
    "print('Pandas Version: ', pd.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9c5d4923",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:13:58.195080Z",
     "iopub.status.busy": "2024-04-26T13:13:58.194597Z",
     "iopub.status.idle": "2024-04-26T13:13:58.200482Z",
     "shell.execute_reply": "2024-04-26T13:13:58.199593Z"
    },
    "papermill": {
     "duration": 0.015673,
     "end_time": "2024-04-26T13:13:58.202484",
     "exception": false,
     "start_time": "2024-04-26T13:13:58.186811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class PlayingCardsDataset(Dataset):\n",
    "    #class function define\n",
    "    def __init__(self, data_dir, transform = None):\n",
    "        #takes in our data directory & assume any sub-folders in dir have class & handle creating sub-class labels for us. \n",
    "        #ImageFolder when called on an item will get us its Image and class.\n",
    "        self.data = ImageFolder(data_dir, transform=transform)\n",
    "    \n",
    "    #for dataloader to know how many examples we have in our dataset.\n",
    "    def __len__(self):\n",
    "        #just length of our data.\n",
    "        return len(self.data) \n",
    "    \n",
    "    #takes in an index location in our dataset and return one item : \n",
    "    def __getitem__(self,idx):\n",
    "        #return and data of the item at that index. i.e idx\n",
    "        return self.data[idx]\n",
    "    \n",
    "    @property\n",
    "    def classes(self):\n",
    "        return self.data.classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "866da370",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:13:58.217400Z",
     "iopub.status.busy": "2024-04-26T13:13:58.217154Z",
     "iopub.status.idle": "2024-04-26T13:14:00.447115Z",
     "shell.execute_reply": "2024-04-26T13:14:00.446258Z"
    },
    "papermill": {
     "duration": 2.240168,
     "end_time": "2024-04-26T13:14:00.449600",
     "exception": false,
     "start_time": "2024-04-26T13:13:58.209432",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dataset = PlayingCardsDataset(\n",
    "    data_dir= '/kaggle/input/cards-image-datasetclassification/train')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0a0e0555",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:00.465607Z",
     "iopub.status.busy": "2024-04-26T13:14:00.465277Z",
     "iopub.status.idle": "2024-04-26T13:14:00.471698Z",
     "shell.execute_reply": "2024-04-26T13:14:00.470859Z"
    },
    "papermill": {
     "duration": 0.016651,
     "end_time": "2024-04-26T13:14:00.473663",
     "exception": false,
     "start_time": "2024-04-26T13:14:00.457012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7624"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e97fae72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:00.490526Z",
     "iopub.status.busy": "2024-04-26T13:14:00.489743Z",
     "iopub.status.idle": "2024-04-26T13:14:00.510408Z",
     "shell.execute_reply": "2024-04-26T13:14:00.509504Z"
    },
    "papermill": {
     "duration": 0.030742,
     "end_time": "2024-04-26T13:14:00.512494",
     "exception": false,
     "start_time": "2024-04-26T13:14:00.481752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<PIL.Image.Image image mode=RGB size=224x224>, 0)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#we are returned a tuple that contains the (Image,Image class) class is number between 0 and 53\n",
    "dataset[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "60cd0762",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:00.528150Z",
     "iopub.status.busy": "2024-04-26T13:14:00.527881Z",
     "iopub.status.idle": "2024-04-26T13:14:00.538509Z",
     "shell.execute_reply": "2024-04-26T13:14:00.537612Z"
    },
    "papermill": {
     "duration": 0.020622,
     "end_time": "2024-04-26T13:14:00.540427",
     "exception": false,
     "start_time": "2024-04-26T13:14:00.519805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<PIL.Image.Image image mode=RGB size=224x224>, 22)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset[3289]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fb7ccf43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:00.556317Z",
     "iopub.status.busy": "2024-04-26T13:14:00.556048Z",
     "iopub.status.idle": "2024-04-26T13:14:00.577917Z",
     "shell.execute_reply": "2024-04-26T13:14:00.577055Z"
    },
    "papermill": {
     "duration": 0.032003,
     "end_time": "2024-04-26T13:14:00.579826",
     "exception": false,
     "start_time": "2024-04-26T13:14:00.547823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<PIL.Image.Image image mode=RGB size=224x224>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image, label = dataset[3289]\n",
    "image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b866b7a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:00.597934Z",
     "iopub.status.busy": "2024-04-26T13:14:00.597139Z",
     "iopub.status.idle": "2024-04-26T13:14:00.662298Z",
     "shell.execute_reply": "2024-04-26T13:14:00.661422Z"
    },
    "papermill": {
     "duration": 0.076163,
     "end_time": "2024-04-26T13:14:00.664246",
     "exception": false,
     "start_time": "2024-04-26T13:14:00.588083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0: 'ace of clubs', 1: 'ace of diamonds', 2: 'ace of hearts', 3: 'ace of spades', 4: 'eight of clubs', 5: 'eight of diamonds', 6: 'eight of hearts', 7: 'eight of spades', 8: 'five of clubs', 9: 'five of diamonds', 10: 'five of hearts', 11: 'five of spades', 12: 'four of clubs', 13: 'four of diamonds', 14: 'four of hearts', 15: 'four of spades', 16: 'jack of clubs', 17: 'jack of diamonds', 18: 'jack of hearts', 19: 'jack of spades', 20: 'joker', 21: 'king of clubs', 22: 'king of diamonds', 23: 'king of hearts', 24: 'king of spades', 25: 'nine of clubs', 26: 'nine of diamonds', 27: 'nine of hearts', 28: 'nine of spades', 29: 'queen of clubs', 30: 'queen of diamonds', 31: 'queen of hearts', 32: 'queen of spades', 33: 'seven of clubs', 34: 'seven of diamonds', 35: 'seven of hearts', 36: 'seven of spades', 37: 'six of clubs', 38: 'six of diamonds', 39: 'six of hearts', 40: 'six of spades', 41: 'ten of clubs', 42: 'ten of diamonds', 43: 'ten of hearts', 44: 'ten of spades', 45: 'three of clubs', 46: 'three of diamonds', 47: 'three of hearts', 48: 'three of spades', 49: 'two of clubs', 50: 'two of diamonds', 51: 'two of hearts', 52: 'two of spades'}\n"
     ]
    }
   ],
   "source": [
    "#Creating a Dictionary to associate target item with class names\n",
    "\n",
    "data_dir= '/kaggle/input/cards-image-datasetclassification/train'\n",
    "target_to_class = {value: key for key, value in ImageFolder(data_dir).class_to_idx.items()}\n",
    "print(target_to_class)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c710e91",
   "metadata": {
    "papermill": {
     "duration": 0.009121,
     "end_time": "2024-04-26T13:14:00.681929",
     "exception": false,
     "start_time": "2024-04-26T13:14:00.672808",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **To make sure our outputs are of same size as the model expects the input to be consistent all the time.**\n",
    "Convert to 128x128 and to a Pytorch Tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dd538993",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:00.700663Z",
     "iopub.status.busy": "2024-04-26T13:14:00.700287Z",
     "iopub.status.idle": "2024-04-26T13:14:00.770614Z",
     "shell.execute_reply": "2024-04-26T13:14:00.769767Z"
    },
    "papermill": {
     "duration": 0.082334,
     "end_time": "2024-04-26T13:14:00.773008",
     "exception": false,
     "start_time": "2024-04-26T13:14:00.690674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "transform = transforms.Compose([transforms.Resize((128,128)),transforms.ToTensor()])\n",
    "data_dir = '/kaggle/input/cards-image-datasetclassification/train'\n",
    "dataset = PlayingCardsDataset(data_dir, transform)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f20380fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:00.791517Z",
     "iopub.status.busy": "2024-04-26T13:14:00.791191Z",
     "iopub.status.idle": "2024-04-26T13:14:00.887592Z",
     "shell.execute_reply": "2024-04-26T13:14:00.886645Z"
    },
    "papermill": {
     "duration": 0.108205,
     "end_time": "2024-04-26T13:14:00.889814",
     "exception": false,
     "start_time": "2024-04-26T13:14:00.781609",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(tensor([[[0.0000, 0.0039, 0.0078,  ..., 0.0039, 0.0039, 0.0039],\n",
       "          [0.0039, 0.0078, 0.0431,  ..., 0.0196, 0.0039, 0.0078],\n",
       "          [0.0235, 0.0392, 0.3490,  ..., 0.2392, 0.0314, 0.0118],\n",
       "          ...,\n",
       "          [0.0039, 0.0235, 0.2392,  ..., 0.2196, 0.0314, 0.0118],\n",
       "          [0.0039, 0.0039, 0.0235,  ..., 0.0118, 0.0078, 0.0039],\n",
       "          [0.0039, 0.0078, 0.0039,  ..., 0.0039, 0.0039, 0.0039]],\n",
       " \n",
       "         [[0.0078, 0.0078, 0.0039,  ..., 0.0039, 0.0039, 0.0039],\n",
       "          [0.0039, 0.0039, 0.0392,  ..., 0.0196, 0.0039, 0.0078],\n",
       "          [0.0078, 0.0275, 0.3373,  ..., 0.2392, 0.0275, 0.0078],\n",
       "          ...,\n",
       "          [0.0039, 0.0235, 0.2431,  ..., 0.2196, 0.0314, 0.0078],\n",
       "          [0.0039, 0.0039, 0.0235,  ..., 0.0157, 0.0078, 0.0039],\n",
       "          [0.0039, 0.0078, 0.0039,  ..., 0.0078, 0.0078, 0.0039]],\n",
       " \n",
       "         [[0.0196, 0.0196, 0.0118,  ..., 0.0118, 0.0118, 0.0118],\n",
       "          [0.0118, 0.0078, 0.0353,  ..., 0.0157, 0.0039, 0.0078],\n",
       "          [0.0118, 0.0196, 0.3137,  ..., 0.2196, 0.0235, 0.0078],\n",
       "          ...,\n",
       "          [0.0078, 0.0196, 0.2157,  ..., 0.1961, 0.0196, 0.0000],\n",
       "          [0.0196, 0.0118, 0.0157,  ..., 0.0078, 0.0039, 0.0039],\n",
       "          [0.0235, 0.0235, 0.0118,  ..., 0.0118, 0.0118, 0.0118]]]),\n",
       " 0)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset[100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "882c0bda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:00.908634Z",
     "iopub.status.busy": "2024-04-26T13:14:00.908295Z",
     "iopub.status.idle": "2024-04-26T13:14:00.916147Z",
     "shell.execute_reply": "2024-04-26T13:14:00.915280Z"
    },
    "papermill": {
     "duration": 0.019348,
     "end_time": "2024-04-26T13:14:00.918026",
     "exception": false,
     "start_time": "2024-04-26T13:14:00.898678",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([3, 128, 128])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image, label = dataset[100]\n",
    "image.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77f2800b",
   "metadata": {
    "papermill": {
     "duration": 0.008547,
     "end_time": "2024-04-26T13:14:00.935276",
     "exception": false,
     "start_time": "2024-04-26T13:14:00.926729",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Above is to get an idea of the 3D Tensor : 128x128 and has 3 channel value: RGB**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "62ad70d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:00.953727Z",
     "iopub.status.busy": "2024-04-26T13:14:00.953379Z",
     "iopub.status.idle": "2024-04-26T13:14:00.959519Z",
     "shell.execute_reply": "2024-04-26T13:14:00.958785Z"
    },
    "papermill": {
     "duration": 0.017717,
     "end_time": "2024-04-26T13:14:00.961465",
     "exception": false,
     "start_time": "2024-04-26T13:14:00.943748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#iterate over the dataset \n",
    "for image,label in dataset:\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a196bac",
   "metadata": {
    "papermill": {
     "duration": 0.008594,
     "end_time": "2024-04-26T13:14:00.978663",
     "exception": false,
     "start_time": "2024-04-26T13:14:00.970069",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **DataLoaders**\n",
    "**Handle the processing to parallelize the reading in of each of these Images.**\n",
    "* **Batching the Dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1a7737f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:00.997505Z",
     "iopub.status.busy": "2024-04-26T13:14:00.997165Z",
     "iopub.status.idle": "2024-04-26T13:14:01.001951Z",
     "shell.execute_reply": "2024-04-26T13:14:01.001002Z"
    },
    "papermill": {
     "duration": 0.016393,
     "end_time": "2024-04-26T13:14:01.003839",
     "exception": false,
     "start_time": "2024-04-26T13:14:00.987446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dataloader = DataLoader(dataset, batch_size = 32, shuffle = True)\n",
    "#Batch_size tells us how many of these examples should be pulled in each time we iterate over the dataloader.\n",
    "#Shuffle : allows to tell the dataloader, that evry time we load an example from our dataset is it to be in order or not?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ec458a4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:01.022842Z",
     "iopub.status.busy": "2024-04-26T13:14:01.022547Z",
     "iopub.status.idle": "2024-04-26T13:14:01.300331Z",
     "shell.execute_reply": "2024-04-26T13:14:01.299391Z"
    },
    "papermill": {
     "duration": 0.289954,
     "end_time": "2024-04-26T13:14:01.302614",
     "exception": false,
     "start_time": "2024-04-26T13:14:01.012660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for images, labels in dataloader:\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db807a2c",
   "metadata": {
    "papermill": {
     "duration": 0.008448,
     "end_time": "2024-04-26T13:14:01.319997",
     "exception": false,
     "start_time": "2024-04-26T13:14:01.311549",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Notice the Difference in the Tensor now**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "34796946",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:01.338316Z",
     "iopub.status.busy": "2024-04-26T13:14:01.337961Z",
     "iopub.status.idle": "2024-04-26T13:14:01.343551Z",
     "shell.execute_reply": "2024-04-26T13:14:01.342729Z"
    },
    "papermill": {
     "duration": 0.01725,
     "end_time": "2024-04-26T13:14:01.345641",
     "exception": false,
     "start_time": "2024-04-26T13:14:01.328391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(torch.Size([32, 3, 128, 128]), torch.Size([32]))"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "images.shape , labels.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ade97818",
   "metadata": {
    "papermill": {
     "duration": 0.008292,
     "end_time": "2024-04-26T13:14:01.362739",
     "exception": false,
     "start_time": "2024-04-26T13:14:01.354447",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Step 2. Pytorch Model** \n",
    "\n",
    "**Pytorch datasets have a structured way of organizing your data, pytorch models follow a similar paradigm.**\n",
    "\n",
    "*     We could create the model from scratch defining each layer.\n",
    "*     However for tasks like image classification, many of the state of the art architectures are readily available and we can import them from packages like timm.\n",
    "*     Understanding the pytorch model is all about understanding the shape the data is at each layer, and the main one we need to modify for a task is the final layer. Here we have 53 targets, so we will modify the last layer for this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "72932026",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:01.381573Z",
     "iopub.status.busy": "2024-04-26T13:14:01.381203Z",
     "iopub.status.idle": "2024-04-26T13:14:01.388065Z",
     "shell.execute_reply": "2024-04-26T13:14:01.387233Z"
    },
    "papermill": {
     "duration": 0.018837,
     "end_time": "2024-04-26T13:14:01.390032",
     "exception": false,
     "start_time": "2024-04-26T13:14:01.371195",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#importing it from the Neural Network Module of PyTorch: Base Module\n",
    "class SimpleCardClassifier(nn.Module):\n",
    "    \n",
    "    def __init__(self, num_classes = 53):\n",
    "        super(SimpleCardClassifier, self).__init__()\n",
    "        \n",
    "        #where we define all the necessary parts of the model. Efficientnet_b0 model by default return feature size of 1280.\n",
    "        #We need to resize that to our 53 classes.\n",
    "        \n",
    "        self.base_model = timm.create_model('efficientnet_b0', pretrained=True)\n",
    "        #Removing the Last layer of the NN here:\n",
    "        self.features = nn.Sequential(*list(self.base_model.children())[:-1])\n",
    "        \n",
    "        enet_out_size = 1280\n",
    "        \n",
    "        #Making a classifer of Linear Layer from our model EB0 output_size to our no. of classes.\n",
    "        self.classifier = nn.Linear(enet_out_size, num_classes)\n",
    "        \n",
    "        pass\n",
    "    \n",
    "    def forward(self, x):\n",
    "        #Connect these above parts and return the output. x represents a batch of an example. \n",
    "        x = self.features(x)\n",
    "        output = self.classifier(x)\n",
    "        return output\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "15edafa7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:01.408577Z",
     "iopub.status.busy": "2024-04-26T13:14:01.408267Z",
     "iopub.status.idle": "2024-04-26T13:14:02.135514Z",
     "shell.execute_reply": "2024-04-26T13:14:02.134545Z"
    },
    "papermill": {
     "duration": 0.738969,
     "end_time": "2024-04-26T13:14:02.137760",
     "exception": false,
     "start_time": "2024-04-26T13:14:01.398791",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8d23e06b6d644a6eb9775bc7bafa4122",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/21.4M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model= SimpleCardClassifier(num_classes=53)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b162e47c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:02.157469Z",
     "iopub.status.busy": "2024-04-26T13:14:02.157148Z",
     "iopub.status.idle": "2024-04-26T13:14:02.167637Z",
     "shell.execute_reply": "2024-04-26T13:14:02.166536Z"
    },
    "papermill": {
     "duration": 0.022418,
     "end_time": "2024-04-26T13:14:02.169611",
     "exception": false,
     "start_time": "2024-04-26T13:14:02.147193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SimpleCardClassifier(\n",
      "  (base_model): EfficientNet(\n",
      "    (conv_stem): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
      "    (bn1): BatchNormAct2d(\n",
      "      32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True\n",
      "      (drop): Identity()\n",
      "      (act): SiLU(inplace=True)\n",
      "    )\n",
      "    (blocks): Sequential(\n",
      "      (0): Sequential(\n",
      "        (0): DepthwiseSeparableConv(\n",
      "          (conv_dw): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=Fa\n"
     ]
    }
   ],
   "source": [
    "#Shows the model architecture\n",
    "print(str(model)[:500])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3c373da4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T13:14:02.188723Z",
     "iopub.status.busy": "2024-04-26T13:14:02.188402Z",
     "iopub.status.idle": "2024-04-26T13:14:02.960506Z",
     "shell.execute_reply": "2024-04-26T13:14:02.959383Z"
    },
    "papermill": {
     "duration": 0.783922,
     "end_time": "2024-04-26T13:14:02.962553",
     "exception": false,
     "start_time": "2024-04-26T13:14:02.178631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([32, 53])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#testing the model \n",
    "example_out = model(images) #tested by passing some examples from our dataloader\n",
    "example_out.shape\n",
    "#Shows the [Batch_size, num_classes] - working"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61bcb204",
   "metadata": {
    "papermill": {
     "duration": 0.00912,
     "end_time": "2024-04-26T13:14:02.981351",
     "exception": false,
     "start_time": "2024-04-26T13:14:02.972231",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "# **Step 3. The training loop**\n",
    "\n",
    "   **Now that we understand the general paradigm of pytorch datasets and models, we need to create the process of training this model.**\n",
    "   \n",
    "*    Some things to consider: We want to validate our model on data it has not been trained on, so usually we split our data into a train and validate datasets (I have whole videos on this). This is easy because we can just create two datasets using our existing class.\n",
    "    * Terms:\n",
    "        * Epoch: One run through the entire training dataset.\n",
    "        * Step: One batch of data as defined in our dataloader\n",
    "*     This loop is one you will become familiar with when training models, you load in data to the model in batches - then calculate the loss and perform backpropagation. There are packages that package this for you, but it's good to have at least written it once to understand how it works.\n",
    "* Two things to select:\n",
    "    *         optimizer, adam is the best place to start for most tasks.\n",
    "    *         loss function: What the model will optimize for.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36faf85f",
   "metadata": {
    "papermill": {
     "duration": 0.008832,
     "end_time": "2024-04-26T13:14:02.999317",
     "exception": false,
     "start_time": "2024-04-26T13:14:02.990485",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 2579480,
     "sourceId": 4532039,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30699,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 18.192152,
   "end_time": "2024-04-26T13:14:05.356471",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-26T13:13:47.164319",
   "version": "2.5.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "09127dfcf91e4165bf2f6ef7ff24de52": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2e28badb7653469a93e3348ef4e141a1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "576b8499875d4a69b751d114741a300c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "57dc2db3aa774047bf3b4370832ee160": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "69ed11dc682f4c47b94fa029646c28a2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8d23e06b6d644a6eb9775bc7bafa4122": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e2e5ae57d4d4403690ac9f2299522171",
        "IPY_MODEL_b7f5e83272954952ae9dae70a4a58c2e",
        "IPY_MODEL_b9200ab58c3040bfa08282d5e78d58fc"
       ],
       "layout": "IPY_MODEL_09127dfcf91e4165bf2f6ef7ff24de52"
      }
     },
     "abb746bf453d4f51b067ad0c85fb4834": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b7f5e83272954952ae9dae70a4a58c2e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_69ed11dc682f4c47b94fa029646c28a2",
       "max": 21355344.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_57dc2db3aa774047bf3b4370832ee160",
       "value": 21355344.0
      }
     },
     "b9200ab58c3040bfa08282d5e78d58fc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_2e28badb7653469a93e3348ef4e141a1",
       "placeholder": "​",
       "style": "IPY_MODEL_bc4ebb18d4e540d080cf2b3a4c7d9a23",
       "value": " 21.4M/21.4M [00:00&lt;00:00, 40.5MB/s]"
      }
     },
     "bc4ebb18d4e540d080cf2b3a4c7d9a23": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "e2e5ae57d4d4403690ac9f2299522171": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_abb746bf453d4f51b067ad0c85fb4834",
       "placeholder": "​",
       "style": "IPY_MODEL_576b8499875d4a69b751d114741a300c",
       "value": "model.safetensors: 100%"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
